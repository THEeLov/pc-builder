openapi: 3.1.0
info:
  title: PCAssemblies
  description: Backend Api for the PC Assemblies application
  version: 0.0.1
servers:
  - url: http://localhost:8080

components:
    schemas:
        UserRegistrationDTO:
            type: object
            properties:
                username:
                    type: string
                email:
                    type: string
                    format: email
                password:
                    type: string
                userType:
                    $ref: '#/components/schemas/UserType'
            required:
                - username
                - email
                - password
                - userType
        ComponentDTO:
            type: object
            properties:
                name:
                    type: string
                type:
                    type: string
                price:
                    type: integer
                imageUrl:
                    type: string
                manufacturer:
                    type: string
        UserLoginDTO:
            type: object
            properties:
                email:
                    type: string
                    format: email
                password:
                    type: string
            required:
                - email
                - password
        UserUpdateDTO:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                username:
                    type: string
                email:
                    type: string
                    format: email
                encryptedPassword:
                    type: string
                userType:
                    $ref: '#/components/schemas/UserType'
            required:
                - id
        ConfigurationCreateDTO:
            type: object
            properties:
                userId:
                    type: integer
                    format: int64
                motherboardId:
                    $ref: '#/components/schemas/MotherboardDTO'
                processorId:
                    $ref: '#/components/schemas/ProcessorDTO'
                gpuId:
                    $ref: '#/components/schemas/GPUDTO'
                ramIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/RAMDTO'
                storageIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/StorageDTO'
                powerSupplyId:
                    $ref: '#/components/schemas/PowerSupplyDTO'
                pcCaseId:
                    $ref: '#/components/schemas/PCCaseDTO'
            required:
                - userId
                - motherboardId
                - processorId
                - gpuId
                - ramIds
                - storageIds
                - powerSupplyId
                - pcCaseId
        ConfigurationDTO:
            type: object
            properties:
                motherboardId:
                    $ref: '#/components/schemas/MotherboardDTO'
                processorId:
                    $ref: '#/components/schemas/ProcessorDTO'
                ramIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/RAMDTO'
                storageIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/StorageDTO'
                powerSupplyId:
                    $ref: '#/components/schemas/PowerSupplyDTO'
                pcCaseId:
                    $ref: '#/components/schemas/PCCaseDTO'
        MotherboardQuery:
            type: object
            properties:
                socket:
                    type: string
                    nullable: true
                ramType:
                    type: string
                    nullable: true
                gpuInterface:
                    type: string
                    nullable: true
                formFactor:
                    type: string
                    nullable: true
                storageBusType:
                    type: string
                    nullable: true;;
        ConfigurationUpdateDTO:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                userId:
                    type: integer
                    format: int64
                motherboardId:
                    $ref: '#/components/schemas/MotherboardDTO'
                processorId:
                    $ref: '#/components/schemas/ProcessorDTO'
                gpuId:
                    $ref: '#/components/schemas/GPUDTO'
                ramIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/RAMDTO'
                storageIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/StorageDTO'
                powerSupplyId:
                    $ref: '#/components/schemas/PowerSupplyDTO'
                pcCaseId:
                    $ref: '#/components/schemas/PCCaseDTO'
            required:
                - id
                - userId
        UserType:
            type: string
            enum:
                - ADMIN
                - USER
        MotherboardDTO:
            type: object
            properties:
                socket:
                    type: string
                formFactor:
                    type: string
                ramSlots:
                    type: integer
                ramType:
                    type: string
                gpuInterface:
                    type: string
                storageBusType:
                    type: string
        ProcessorDTO:
            type: object
            properties:
                architecture:
                    type: string
                cores:
                    type: integer
                threads:
                    type: integer
                bits:
                    type: integer
                socket:
                    type: string
        GPUDTO:
            type: object
            properties:
                memory:
                    type: integer
                powerConnector:
                    type: string
                interface:
                    type: string
                power:
                    type: integer
        RAMDTO:
            type: object
            properties:
                memoryType:
                    type: string
                capacity:
                    type: integer
                computerType:
                    type: string
        StorageDTO:
            type: object
            properties:
                storageType:
                    type: string
                capacity:
                    type: integer
                    format: int64
                busType:
                    type: string
        PowerSupplyDTO:
            type: object
            properties:
                powerOutput:
                    type: integer
                efficiency:
                    type: string
                formFactor:
                    type: string
        PCCaseDTO:
            type: object
            properties:
                formFactor:
                    type: string
        ConfigurationList:
            type: array
            items:
                $ref: '#/components/schemas/ConfigurationDTO'
        SuccessfulResponse:
            type: object
            properties:
              message:
                type: string
                example: "Success!"
        NotFoundError:
            type: object
            properties:
              message:
                type: string
                example: "Not found"
        BadRequestError:
            type: object
            properties:
              message:
                type: string
                example: "Bad request"
        InternalServerError:
            type: object
            properties:
              message:
                type: string
        LoginSuccess:
            type: object
            properties:
              id:
                type: string
                example: "13c45a61-7260-41b6-88de-2260fc61ccb2"
              message:
                type: string
    responses:
        BadRequestError:
            description: The provided data are not okay.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/BadRequestError'
        ServerSideError:
            description: Server side error.
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/InternalServerError'
        Success:
            description: Success
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/SuccessfulResponse'
        ConfigurationListResponse:
            description: Gets all configurations of userId.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/ConfigurationList'
        NotFoundError:
            description: element not found.
            content:
                application/json:
                    schema:
                        message:
                            type: string
                            example: "Not found"
    securitySchemes:
        sessionCookie:
            type: apiKey
            in: cookie
            name: session

security:
  - sessionCookie: []


paths:
    /users/register:
        post:
            summary: Register a new user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRegistrationDTO'
            responses:
                '200':
                    description: User registration successful
                    headers:
                        Set-Cookie:
                            description: Session ID Cookie
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginSuccess'

                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/BadRequestError'
    /users/login:
        post:
            summary: Log in as a user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLoginDTO'
            responses:
                '200':
                    description: User login successful
                    headers:
                        Set-Cookie:
                            description: Session ID Cookie
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginSuccess'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            
    /users/{userId}:
        put:
            summary: Update user details
            parameters:
             -  in: path
                name: userId
                required: true
                description: ID of the user to update
                schema:
                    type: integer
                    format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdateDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
      
    /configurations:
        post:
            summary: Create a new PC configuration
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfigurationCreateDTO'
            responses:
                '200':
                    description: PC configuration created successfully
                    content:
                        application/json:
                            schema:
                                id:
                                    description: The ID of the configuration.
                                    type: int64
                                message:
                                    type: string
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
            
        put:
            summary: Update an existing PC configuration
            parameters:
              - in: path
                name: configurationId
                required: true
                description: ID of the configuration to update
                schema:
                    type: integer
                    format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConfigurationUpdateDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /configurations/{userId}:
        get:
            summary: Get all configurations for user with userId.
            parameters:
             -  in: path
                name: userId
                required: true
                description: Id of the user who owns the configurations.
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    $ref: '#/components/responses/ConfigurationListResponse'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
            - sessionCookie: []
            
    /components/motherboards:
        get:
            summary: Get all motherboards.
            parameters:
              - in: query
                name: motherboardQuery
                required: false
                schema:
                    $ref: '#/components/schemas/MotherboardQuery'
            responses:
                '200':
                    description: Gets all motherboards.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the motherboard.
                                        data:
                                            $ref: '#/components/schemas/MotherboardDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MotherboardDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/motherboards/{motherboardId}:
        get:
            parameters:
              - in: path
                name: motherboardId
                required: true
                description: ID of the motherboard
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: Gets motherboard with motherboardId
                    content:
                      application/json:
                        schema:
                            type: object
                            properties:
                                id:
                                    type: integer
                                    description: ID of the motherboard.
                                data:
                                    $ref: '#/components/schemas/MotherboardDTO'
                                component:
                                    $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/rams:
        get:
            parameters:
              - in: query
                name: memoryType
                description: Specific type of ram memory
                required: false
                schema:
                    type: string
                    example: "ddr4"
            responses:
                '200':
                    description: gets all rams
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the RAM.
                                        data:
                                            $ref: '#/components/schemas/RAMDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref:
                                    '#/components/schemas/RAMDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/rams/{ramId}:
        get:
            parameters:
              - in: path
                name: ramId
                required: true
                description: ID of RAM
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets a ram with ramId
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the RAM.
                                    data:
                                        $ref: '#/components/schemas/RAMDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/processors:
        get:
            parameters:
              - in: query
                name: socket
                description: Socket of processor
                required: false
                schema:
                    type: string
                    example: "LGA1200"
            responses:
                '200':
                    description: gets all processors
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the Processor.
                                        data:
                                            $ref: '#/components/schemas/ProcessorDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref:
                                    '#/components/schemas/ProcessorDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/procesosors/{processorId}:
        get:
            parameters:
              - in: path
                name: processorId
                required: true
                description: ID of Processor
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets processorId processor
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the Processor.
                                    data:
                                        $ref: '#/components/schemas/ProcessorDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/gpus:
        get:
            responses:
                '200':
                    description: gets gpus
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the GPU.
                                        data:
                                            $ref: '#/components/schemas/GPUDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
        security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref: '#/components/schemas/GPUDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/gpus/{gpuId}:
        get:
            parameters:
              - in: path
                name: gpuId
                required: true
                description: ID of GPU
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets gpuId gpu
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the GPU.
                                    data:
                                        $ref: '#/components/schemas/GPUDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/pccases:
        get:
            responses:
                '200':
                    description: gets pccases
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the PCCase.
                                        data:
                                            $ref: '#/components/schemas/PCCaseDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref: '#/components/schemas/PCCaseDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/pccases/{pcCaseId}:
        get:
            parameters:
              - in: path
                name: pcCaseId
                required: true
                description: ID of PCCase
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets pccaseId pccase
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the PCCase.
                                    data:
                                        $ref: '#/components/schemas/PCCaseDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/storages:
        get:
            responses:
                '200':
                    description: gets storages
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the Storage.
                                        data:
                                            $ref: '#/components/schemas/StorageDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref: '#/components/schemas/StorageDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/storages/{storageId}:
        get:
            parameters:
              - in: path
                name: storageId
                required: true
                description: ID of Storage.
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets storage with storageId
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the Storage..
                                    data:
                                        $ref: '#/components/schemas/StorageDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
    /components/powersupplies:
        get:
            responses:
                '200':
                    description: gets all powersupplies
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        id:
                                            type: integer
                                            description: ID of the PowerSupply.
                                        data:
                                            $ref: '#/components/schemas/PowerSupplyDTO'
                                        component:
                                            $ref: '#/components/schemas/ComponentDTO'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
        post:
            requestBody:
                required: true
                content:
                    application/json:
                            schema:
                                $ref: '#/components/schemas/PowerSupplyDTO'
            responses:
                '200':
                    $ref: '#/components/responses/Success'
                '400':
                    $ref: '#/components/responses/BadRequestError'
                '500':
                    $ref: '#/components/responses/ServerSideError'
            security:
                - sessionCookie: []
    /components/powersupplies/{powerSupplyId}:
        get:
            parameters:
              - in: path
                name: powerSupplyId
                required: true
                description: ID of PowerSupply
                schema:
                    type: integer
                    format: int64
            responses:
                '200':
                    description: gets a powersupply with powerSupplyId
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    id:
                                        type: integer
                                        description: ID of the PowerSupplyDTO.
                                    data:
                                        $ref: '#/components/schemas/PowerSupplyDTO'
                                    component:
                                        $ref: '#/components/schemas/ComponentDTO'
                '404':
                    $ref: '#/components/responses/NotFoundError'
                '500':
                    $ref: '#/components/responses/ServerSideError'



# Funkcionalita by mala byť taká, že na to aby mohol user začať buildiť svoj pc sa musi
# zaregistrivať/prihlásiť. Tým pádom dostane session cookie. session cookie sa viaže na jeho Konfiguraciu
# Potom keď urobi klient request na napriklad /components/procesors tak pošle spolu s tým svoju session cookie.
# v backende sa vyrieši kompatibilita s jeho konfiguraciou a vratia sa mu presne tie komponenty, ktoré sú kompatibilné s
# jeho konfiguráciou.